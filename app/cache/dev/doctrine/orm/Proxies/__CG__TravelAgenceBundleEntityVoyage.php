<?php

namespace Proxies\__CG__\Travel\AgenceBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Voyage extends \Travel\AgenceBundle\Entity\Voyage implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'moyenTransport', 'destination', 'budget', 'nbPlace', 'programme', 'itineraire', 'dateDepart', 'dateRetour', 'type', 'typesortie', 'image', 'respoAgence', 'hotelId', 'voyageur');
        }

        return array('__isInitialized__', 'id', 'moyenTransport', 'destination', 'budget', 'nbPlace', 'programme', 'itineraire', 'dateDepart', 'dateRetour', 'type', 'typesortie', 'image', 'respoAgence', 'hotelId', 'voyageur');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Voyage $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setMoyenTransport($moyenTransport)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMoyenTransport', array($moyenTransport));

        return parent::setMoyenTransport($moyenTransport);
    }

    /**
     * {@inheritDoc}
     */
    public function getMoyenTransport()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMoyenTransport', array());

        return parent::getMoyenTransport();
    }

    /**
     * {@inheritDoc}
     */
    public function setDestination($destination)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDestination', array($destination));

        return parent::setDestination($destination);
    }

    /**
     * {@inheritDoc}
     */
    public function getDestination()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDestination', array());

        return parent::getDestination();
    }

    /**
     * {@inheritDoc}
     */
    public function setBudget($budget)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBudget', array($budget));

        return parent::setBudget($budget);
    }

    /**
     * {@inheritDoc}
     */
    public function getBudget()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBudget', array());

        return parent::getBudget();
    }

    /**
     * {@inheritDoc}
     */
    public function setNbPlace($nbPlace)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNbPlace', array($nbPlace));

        return parent::setNbPlace($nbPlace);
    }

    /**
     * {@inheritDoc}
     */
    public function getNbPlace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNbPlace', array());

        return parent::getNbPlace();
    }

    /**
     * {@inheritDoc}
     */
    public function setProgramme($programme)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProgramme', array($programme));

        return parent::setProgramme($programme);
    }

    /**
     * {@inheritDoc}
     */
    public function getProgramme()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProgramme', array());

        return parent::getProgramme();
    }

    /**
     * {@inheritDoc}
     */
    public function setItineraire($itineraire)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setItineraire', array($itineraire));

        return parent::setItineraire($itineraire);
    }

    /**
     * {@inheritDoc}
     */
    public function getItineraire()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getItineraire', array());

        return parent::getItineraire();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateDepart($dateDepart)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateDepart', array($dateDepart));

        return parent::setDateDepart($dateDepart);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateDepart()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateDepart', array());

        return parent::getDateDepart();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateRetour($dateRetour)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateRetour', array($dateRetour));

        return parent::setDateRetour($dateRetour);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateRetour()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateRetour', array());

        return parent::getDateRetour();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', array($type));

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', array());

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setTypesortie($typesortie)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypesortie', array($typesortie));

        return parent::setTypesortie($typesortie);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypesortie()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypesortie', array());

        return parent::getTypesortie();
    }

    /**
     * {@inheritDoc}
     */
    public function setImage($image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', array($image));

        return parent::setImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', array());

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function setRespoAgence(\Travel\AgenceBundle\Entity\RespoAgence $respoAgence = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRespoAgence', array($respoAgence));

        return parent::setRespoAgence($respoAgence);
    }

    /**
     * {@inheritDoc}
     */
    public function getRespoAgence()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRespoAgence', array());

        return parent::getRespoAgence();
    }

    /**
     * {@inheritDoc}
     */
    public function setHotelId(\Travel\AgenceBundle\Entity\Hotel $hotelId = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHotelId', array($hotelId));

        return parent::setHotelId($hotelId);
    }

    /**
     * {@inheritDoc}
     */
    public function getHotelId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHotelId', array());

        return parent::getHotelId();
    }

    /**
     * {@inheritDoc}
     */
    public function addVoyageur(\Travel\AgenceBundle\Entity\Voyageur $voyageur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addVoyageur', array($voyageur));

        return parent::addVoyageur($voyageur);
    }

    /**
     * {@inheritDoc}
     */
    public function removeVoyageur(\Travel\AgenceBundle\Entity\Voyageur $voyageur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeVoyageur', array($voyageur));

        return parent::removeVoyageur($voyageur);
    }

    /**
     * {@inheritDoc}
     */
    public function getVoyageur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVoyageur', array());

        return parent::getVoyageur();
    }

}
